# LLDB initialization file for BackgroundTime debugging
# This file provides convenient aliases for debugging background tasks

# Simulate background task launch
# Usage: simulate_task "com.yourapp.background-refresh"
command alias simulate_task expression -l objc -- (void)[[BGTaskScheduler sharedScheduler] _simulateLaunchForTaskWithIdentifier:%1]

# Alternative alias with shorter name
# Usage: bg_launch "com.yourapp.background-refresh" 
command alias bg_launch expression -l objc -- (void)[[BGTaskScheduler sharedScheduler] _simulateExpirationForTaskWithIdentifier:%1]

# Simulate task expiration (useful for testing cleanup)
# Usage: expire_task "com.yourapp.background-refresh"
command alias expire_task expression -l objc -- (void)[[BGTaskScheduler sharedScheduler] _simulateExpirationForTaskWithIdentifier:%1]

# Get pending task requests (useful for debugging)
# Usage: pending_tasks
command alias pending_tasks expression -l objc -O -- [[BGTaskScheduler sharedScheduler] _pendingTaskRequests]

# Print background app refresh status
# Usage: bg_status
command alias bg_status expression -l objc -O -- [[UIApplication sharedApplication] backgroundRefreshStatus]

# Quick debug info for background tasks
# Usage: bg_info
command alias bg_info script \
import lldb; \
target = lldb.debugger.GetSelectedTarget(); \
process = target.GetProcess(); \
thread = process.GetSelectedThread(); \
frame = thread.GetSelectedFrame(); \
print("=== Background Task Debug Info ==="); \
result = frame.EvaluateExpression("(int)[[UIApplication sharedApplication] backgroundRefreshStatus]"); \
status_map = {0: "Denied", 1: "Restricted", 2: "Available"}; \
status = status_map.get(result.GetValueAsUnsigned(), "Unknown"); \
print(f"Background App Refresh Status: {status}"); \
pending = frame.EvaluateExpression("[[BGTaskScheduler sharedScheduler] _pendingTaskRequests]"); \
print(f"Pending Tasks: {pending.GetObjectDescription()}");

# Settings for better debugging experience
settings set target.process.thread.step-avoid-regexp ^std::
settings set target.x86-disassembly-flavor intel
settings set target.inline-breakpoint-strategy always